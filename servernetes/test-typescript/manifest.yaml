apiVersion: v1
kind: Pod
metadata:
  name: servernetes-typescript
  labels:
    name: servernetes-typescript
    app: servernetes
spec:
  initContainers:
    - name: copy-source
      image: busybox
      command: ["sh", "-c"]
      args:
        - mkdir -p /app/servernetes_lib && cp -Lr /src/* /app/ && cp -Lr /src_lib/* /app/servernetes_lib/
      volumeMounts:
        - name: app-source
          mountPath: /app
        - name: config-volume
          mountPath: /src
        - name: config-lib-volume
          mountPath: /src_lib
    - name: init-install
      image: node:18-alpine
      command: ["sh", "-c"]
      args:
        - cd /app && npm install && npm run build && ls -R /app && cat /app/tsconfig.json && echo "Build process complete"
      volumeMounts:
        - name: app-source
          mountPath: /app
  containers:
    - name: nodejs-container
      image: node:18-alpine
      workingDir: /app
      env:
        - name: SECRET_URL
          valueFrom:
            secretKeyRef:
              name: secret-url
              key: SECRET_URL
      command: ["sh", "-c"]
      args:
        - "node dist/main.js"
      resources:
        limits:
          cpu: "0.5"
          memory: "512Mi"
        requests:
          cpu: "0.1"
          memory: "50Mi"
      volumeMounts:
        - name: app-source
          mountPath: /app
  volumes:
    - name: config-volume
      configMap:
        name: servernetes-typescript
    - name: config-lib-volume
      configMap:
        name: servernetes-typescript-lib
    - name: app-source
      emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: servernetes-typescript
data:
  package.json: |
    {
      "name": "servernetes",
      "version": "1.0.0",
      "main": "dist/main.js",
      "scripts": {
        "build": "tsc",
        "start": "node dist/main.js"
      },
      "dependencies": {
        "axios": "^0.21.1",
        "dotenv": "^10.0.0",
        "express": "^4.17.1"
      },
      "devDependencies": {
        "typescript": "^4.2.3",
        "@types/express": "^4.17.11"
      }
    }
  tsconfig.json: |
    {
      "compilerOptions": {
        "outDir": "./dist",
        "module": "commonjs",
        "target": "es6",
        "strict": true,
        "esModuleInterop": true
      },
      "include": ["**/*.ts"],
      "exclude": ["node_modules"]
    }
  main.ts: |
    import express from 'express';
    import { Request, Response } from 'express';
    import axios from 'axios';
    import * as dotenv from 'dotenv';
    import { getResult } from './servernetes_lib/servernetes_lib';
    
    dotenv.config();

    const app = express();
    const SECRET_URL = process.env.SECRET_URL;

    if (!SECRET_URL) {
        console.error("SECRET_URL environment variable not set");
        throw new Error("SECRET_URL environment variable not set");
    }

    app.use(express.json());

    app.post('/', async (req: Request, res: Response) => {
        const data = req.body;
        console.info(`Received data: ${JSON.stringify(data)}`);
        
        /* NOTE: Example for sending data to some other webhook.
        try {
            const response = await axios.post(SECRET_URL, data);
            res.status(200).send(response.data);
        } catch (error) {
            console.error(error);
            res.status(500).send(error);
        }
        */

        res.status(200).send(getResult());
    });

    const port = 7777;
    app.listen(port, () => {
        console.log(`Server running on port ${port}`);
    });
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: servernetes-typescript-lib
data:
  servernetes_lib.ts: |
    export function getResult() {
      console.log("hello there");
      return "hello from TypeScript";
    }
---
apiVersion: v1
kind: Service
metadata:
  name: servernetes-typescript
  labels:
    app: servernetes
spec:
  type: ClusterIP
  ports:
    - port: 7777
      targetPort: 7777
  selector:
    name: servernetes-typescript
